{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DataMaxi+ Python SDK","text":"<p>This is the official implementation of Python SDK for DataMaxi+ API. The package can be used to fetch both historical and latest data using DataMaxi+ API. This package is compatible with Python v3.8+.</p> <ul> <li>Installation</li> <li>Configuration</li> <li>Environment Variables</li> <li>Quickstart</li> <li>Local Development</li> <li>Setup</li> <li>Testing</li> <li>Links</li> <li>Contributing</li> <li>License</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip3 install datamaxi\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Private API endpoints are protected by an API key. You can get the API key upon registering at https://datamaxiplus.com/auth.</p> Option Explanation <code>api_key</code> Your API key <code>base_url</code> If <code>base_url</code> is not provided, it defaults to <code>https://api.datamaxiplus.com</code>. <code>timeout</code> Number of seconds to wait for a server response. By default requests do not time out. <code>proxies</code> Proxy through which the request is queried <code>show_limit_usage</code> Return response as dictionary including <code>\"limit_usage\"</code> and <code>\"data\"</code> keys <code>show_header</code> Return response as dictionary including <code>\"header\"</code> and <code>\"data\"</code> keys"},{"location":"#environment-variables","title":"Environment Variables","text":"<p>You may use environment variables to configure the SDK to avoid any inline boilerplate.</p> Env Description <code>DATAMAXI_API_KEY</code> Used instead of <code>api_key</code> if none is passed."},{"location":"#quickstart","title":"Quickstart","text":"<p>DataMaxi+ Python package currently includes the following clients:</p> <ul> <li><code>Datamaxi</code></li> <li><code>Naver</code></li> <li><code>Google</code></li> </ul> <p>All clients accept the same parameters that are described at Configuration section. First, import the clients,</p> <pre><code># Main client to access crypto trading data\nfrom datamaxi.datamaxi import Datamaxi\n\n# Trend\nfrom datamaxi.naver import Naver\nfrom datamaxi.google import Google\n</code></pre> <p>and initialize them.</p> <pre><code># Main client\nmaxi = Datamaxi(api_key=api_key)\n\n# Trend\nnaver = Naver(api_key=api_key)\ngoogle = Google(api_key=api_key)\n</code></pre>"},{"location":"#local-development","title":"Local Development","text":""},{"location":"#setup","title":"Setup","text":"<p>If you wish to work on local development please clone/fork the git repo and use <code>pip install -r requirements.txt</code> to setup the project.</p>"},{"location":"#testing","title":"Testing","text":"<pre><code># In case packages are not installed yet\npip3 install -r requirements/requirements-test.txt\n\npython3 -m pytest tests/\n</code></pre>"},{"location":"#links","title":"Links","text":"<ul> <li>Official Website</li> <li>Documentation</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! If you discover a bug in this project, please feel free to open an issue to discuss the changes you would like to propose.</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"api/","title":"DataMaxi+ API","text":""},{"location":"api/#datamaxi.api.API","title":"API","text":"<pre><code>API(\n    api_key=None,\n    base_url=None,\n    timeout=10,\n    proxies=None,\n    show_limit_usage=False,\n    show_header=False,\n)\n</code></pre> <p>               Bases: <code>object</code></p> <p>The base class for all DataMaxi+ Python clients. <code>api_key</code> can be set as an environment variable <code>DATAMAXI_API_KEY</code>.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The API key for the DataMaxi+ API.</p> </li> <li> <code>base_url</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The base URL for the DataMaxi+ API.</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>The timeout for the requests.</p> </li> <li> <code>proxies</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>The proxies for the requests.</p> </li> <li> <code>show_limit_usage</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show the limit usage.</p> </li> <li> <code>show_header</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show the header.</p> </li> </ul>"},{"location":"cex-announcement/","title":"CEX Announcement","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch announcement data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-announcement/#datamaxi.datamaxi.CexAnnouncement.get","title":"get","text":"<pre><code>get(\n    category: Optional[str] = None,\n    page: int = 1,\n    limit: int = 1000,\n    sort: str = \"desc\",\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get exchange announcements</p> <p><code>GET /api/v1/announcements</code></p> <p>https://docs.datamaxiplus.com/rest/cex/announcements</p> <p>Parameters:</p> <ul> <li> <code>category</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>announcement category</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, Any]</code>           \u2013            <p>Historical announcements</p> </li> </ul>"},{"location":"cex-candle/","title":"CEX Candle","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch CEX candle data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-candle/#datamaxi.datamaxi.CexCandle.get","title":"get","text":"<pre><code>get(\n    exchange: str,\n    symbol: str,\n    interval: str = \"1d\",\n    market: str = \"spot\",\n    page: int = 1,\n    limit: int = 1000,\n    fromDateTime: str = None,\n    toDateTime: str = None,\n    sort: str = \"desc\",\n    pandas: bool = True,\n) -&gt; Union[\n    Tuple[Dict, Callable], Tuple[pd.DataFrame, Callable]\n]\n</code></pre> <p>Fetch candle data</p> <p><code>GET /api/v1/cex/candle</code></p> <p>https://docs.datamaxiplus.com/rest/cex/candle/data</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol name</p> </li> <li> <code>interval</code>               (<code>str</code>, default:                   <code>'1d'</code> )           \u2013            <p>Candle interval</p> </li> <li> <code>market</code>               (<code>str</code>, default:                   <code>'spot'</code> )           \u2013            <p>Market type (spot/futures)</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>fromDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Start date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>toDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>End date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Tuple[Dict, Callable], Tuple[DataFrame, Callable]]</code>           \u2013            <p>Candle data in pandas DataFrame and next request function</p> </li> </ul>"},{"location":"cex-candle/#datamaxi.datamaxi.CexCandle.exchanges","title":"exchanges","text":"<pre><code>exchanges(market: str = 'spot') -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.CexCandle.get API.</p> <p><code>GET /api/v1/cex/candle/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/cex/candle/exchanges</p> <p>Parameters:</p> <ul> <li> <code>market</code>               (<code>str</code>, default:                   <code>'spot'</code> )           \u2013            <p>Market type (spot/futures)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchanges</p> </li> </ul>"},{"location":"cex-candle/#datamaxi.datamaxi.CexCandle.symbols","title":"symbols","text":"<pre><code>symbols(\n    exchange: str = None, market: str = None\n) -&gt; List[Dict]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.CexCandle.get API.</p> <p><code>GET /api/v1/cex/candle/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/cex/candle/symbols</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Exchange name</p> </li> <li> <code>market</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Market type (spot/futures)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[Dict]</code>           \u2013            <p>List of supported symbols</p> </li> </ul>"},{"location":"cex-candle/#datamaxi.datamaxi.CexCandle.intervals","title":"intervals","text":"<pre><code>intervals() -&gt; List[str]\n</code></pre> <p>Fetch supported intervals accepted by datamaxi.CexCandle.get API.</p> <p><code>GET /api/v1/candle/intervals</code></p> <p>https://docs.datamaxiplus.com/rest/cex/candle/intervals</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported intervals</p> </li> </ul>"},{"location":"cex-orderbook/","title":"CEX Orderbook","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch orderbook data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-orderbook/#datamaxi.datamaxi.CexOrderbook.get","title":"get","text":"<pre><code>get(\n    exchange: str, symbol: str, pandas: bool = True\n) -&gt; Union[Dict, pd.DataFrame]\n</code></pre> <p>Fetch orderbook data</p> <p><code>GET /api/v1/orderbook</code></p> <p>https://docs.datamaxiplus.com/rest/cex/orderbook/data</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>symbol name</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Dict, DataFrame]</code>           \u2013            <p>CexOrderbook data in pandas DataFrame</p> </li> </ul>"},{"location":"cex-orderbook/#datamaxi.datamaxi.CexOrderbook.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.CexOrderbook.get API.</p> <p><code>GET /api/v1/orderbook/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/cex/orderbook/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchange</p> </li> </ul>"},{"location":"cex-orderbook/#datamaxi.datamaxi.CexOrderbook.symbols","title":"symbols","text":"<pre><code>symbols(exchange: str) -&gt; List[str]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.CexOrderbook.get API.</p> <p><code>GET /api/v1/orderbook/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/cex/orderbook/symbols</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported symbols</p> </li> </ul>"},{"location":"cex-ticker/","title":"CEX Ticker","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch ticker data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-ticker/#datamaxi.datamaxi.CexTicker.get","title":"get","text":"<pre><code>get(\n    exchange: str, symbol: str, pandas: bool = True\n) -&gt; Union[Dict, pd.DataFrame]\n</code></pre> <p>Fetch ticker data</p> <p><code>GET /api/v1/ticker</code></p> <p>https://docs.datamaxiplus.com/rest/cex/ticker/data</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol name</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Dict, DataFrame]</code>           \u2013            <p>CexTicker data in pandas DataFrame</p> </li> </ul>"},{"location":"cex-ticker/#datamaxi.datamaxi.CexTicker.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.CexTicker.get API.</p> <p><code>GET /api/v1/ticker/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/cex/ticker/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchange</p> </li> </ul>"},{"location":"cex-ticker/#datamaxi.datamaxi.CexTicker.symbols","title":"symbols","text":"<pre><code>symbols(exchange: str) -&gt; List[str]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.CexTicker.get API.</p> <p><code>GET /api/v1/ticker/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/cex/ticker/symbols</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported symbols</p> </li> </ul>"},{"location":"cex-token-updates/","title":"CEX Token Updates","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch token update data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-token-updates/#datamaxi.datamaxi.CexTokenUpdates.get","title":"get","text":"<pre><code>get(\n    type: Optional[str] = None,\n    page: int = 1,\n    limit: int = 1000,\n    sort: str = \"desc\",\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get token update data</p> <p><code>GET /api/v1/token/updates</code></p> <p>https://docs.datamaxiplus.com/rest/cex/token-updates</p> <p>Parameters:</p> <ul> <li> <code>type</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Update type</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, Any]</code>           \u2013            <p>Token update data in list of dictionary</p> </li> </ul>"},{"location":"cex-trading-fees/","title":"CEX Trading Fees","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch CEX trading fee data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-trading-fees/#datamaxi.datamaxi.CexTradingFees.get","title":"get","text":"<pre><code>get(exchange: str = None, symbol: str = None) -&gt; List[Dict]\n</code></pre> <p>Fetch trading fee data</p> <p><code>GET /api/v1/trading-fees</code></p> <p>https://docs.datamaxiplus.com/rest/cex/trading-fees/data</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Exchange name</p> </li> <li> <code>symbol</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Symbol name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[Dict]</code>           \u2013            <p>Trading fee data</p> </li> </ul>"},{"location":"cex-trading-fees/#datamaxi.datamaxi.CexTradingFees.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.CexTradingFees.get API.</p> <p><code>GET /api/v1/trading-fees/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/cex/trading-fees/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchange</p> </li> </ul>"},{"location":"cex-trading-fees/#datamaxi.datamaxi.CexTradingFees.symbols","title":"symbols","text":"<pre><code>symbols(exchange: str) -&gt; List[str]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.CexTradingFees.get API.</p> <p><code>GET /api/v1/trading-fees/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/cex/trading-fees/symbols</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported assets</p> </li> </ul>"},{"location":"cex-wallet-status/","title":"CEX Wallet Status","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch wallet status data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"cex-wallet-status/#datamaxi.datamaxi.CexWalletStatus.get","title":"get","text":"<pre><code>get(\n    exchange: str, asset: str, pandas: bool = True\n) -&gt; Union[Dict, pd.DataFrame]\n</code></pre> <p>Fetch wallet status data</p> <p><code>GET /api/v1/wallet-status</code></p> <p>https://docs.datamaxiplus.com/rest/cex/wallet-status/data</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>asset</code>               (<code>str</code>)           \u2013            <p>Asset name</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Dict, DataFrame]</code>           \u2013            <p>Wallet status data</p> </li> </ul>"},{"location":"cex-wallet-status/#datamaxi.datamaxi.CexWalletStatus.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.CexWalletStatus.get API.</p> <p><code>GET /api/v1/wallet-status/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/cex/wallet-status/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchange</p> </li> </ul>"},{"location":"cex-wallet-status/#datamaxi.datamaxi.CexWalletStatus.assets","title":"assets","text":"<pre><code>assets(exchange: str) -&gt; List[str]\n</code></pre> <p>Fetch supported assets accepted by datamaxi.CexWalletStatus.get API.</p> <p><code>GET /api/v1/wallet-status/assets</code></p> <p>https://docs.datamaxiplus.com/rest/cex/wallet-status/assets</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported assets</p> </li> </ul>"},{"location":"dex/","title":"DEX","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch DEX data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.trade","title":"trade","text":"<pre><code>trade(\n    chain: str,\n    exchange: str,\n    pool: str,\n    page: int = 1,\n    limit: int = 1000,\n    fromDateTime: str = None,\n    toDateTime: str = None,\n    sort: str = \"desc\",\n    pandas: bool = True,\n) -&gt; Union[\n    Tuple[Dict, Callable], Tuple[pd.DataFrame, Callable]\n]\n</code></pre> <p>Fetch DEX trade data</p> <p><code>GET /api/v1/dex/trade</code></p> <p>https://docs.datamaxiplus.com/rest/dex/trade</p> <p>Parameters:</p> <ul> <li> <code>chain</code>               (<code>str</code>)           \u2013            <p>Chain name</p> </li> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>pool</code>               (<code>str</code>)           \u2013            <p>Pool name</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>fromDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Start date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>toDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>End date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Tuple[Dict, Callable], Tuple[DataFrame, Callable]]</code>           \u2013            <p>DEX trade data in pandas DataFrame and next request function</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.candle","title":"candle","text":"<pre><code>candle(\n    chain: str,\n    exchange: str,\n    pool: str,\n    interval: str = \"1d\",\n    page: int = 1,\n    limit: int = 1000,\n    fromDateTime: str = None,\n    toDateTime: str = None,\n    sort: str = \"desc\",\n    pandas: bool = True,\n) -&gt; Union[\n    Tuple[Dict, Callable], Tuple[pd.DataFrame, Callable]\n]\n</code></pre> <p>Fetch DEX candle data</p> <p><code>GET /api/v1/dex/candle</code></p> <p>https://docs.datamaxiplus.com/rest/dex/candle</p> <p>Parameters:</p> <ul> <li> <code>chain</code>               (<code>str</code>)           \u2013            <p>Chain name</p> </li> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>pool</code>               (<code>str</code>)           \u2013            <p>Pool name</p> </li> <li> <code>interval</code>               (<code>str</code>, default:                   <code>'1d'</code> )           \u2013            <p>Candle interval</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>fromDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Start date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>toDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>End date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Tuple[Dict, Callable], Tuple[DataFrame, Callable]]</code>           \u2013            <p>DEX candle data in pandas DataFrame and next request function</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.liquidity","title":"liquidity","text":"<pre><code>liquidity(\n    chain: str,\n    exchange: str,\n    pool: str,\n    page: int = 1,\n    limit: int = 1000,\n    fromDateTime: str = None,\n    toDateTime: str = None,\n    sort: str = \"desc\",\n    pandas: bool = True,\n) -&gt; Union[\n    Tuple[Dict, Callable], Tuple[pd.DataFrame, Callable]\n]\n</code></pre> <p>Fetch DEX liquidity data</p> <p><code>GET /api/v1/dex/liquidity</code></p> <p>https://docs.datamaxiplus.com/rest/dex/liquidity</p> <p>Parameters:</p> <ul> <li> <code>chain</code>               (<code>str</code>)           \u2013            <p>Chain name</p> </li> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>pool</code>               (<code>str</code>)           \u2013            <p>Pool name</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>fromDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Start date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>toDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>End date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Tuple[Dict, Callable], Tuple[DataFrame, Callable]]</code>           \u2013            <p>DEX liquidity data in pandas DataFrame and next request function</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.chains","title":"chains","text":"<pre><code>chains() -&gt; List[str]\n</code></pre> <p>Fetch supported chains accepted by datamaxi.Dex.candle, datamaxi.Dex.trade and datamaxi.Dex.liquidity.</p> <p><code>GET /api/v1/dex/chains</code></p> <p>https://docs.datamaxiplus.com/rest/dex/chains</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported chains</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.Dex.candle, datamaxi.Dex.trade and datamaxi.Dex.liquidity.</p> <p><code>GET /api/v1/dex/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/dex/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchanges</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.pools","title":"pools","text":"<pre><code>pools(\n    exchange: str = None, chain: str = None\n) -&gt; List[Dict]\n</code></pre> <p>Fetch supported pools accepted by datamaxi.Dex.candle, datamaxi.Dex.trade and datamaxi.Dex.liquidity.</p> <p><code>GET /api/v1/dex/pools</code></p> <p>https://docs.datamaxiplus.com/rest/dex/pools</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Exchange name</p> </li> <li> <code>chain</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Chain name (applied to DEX only)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[Dict]</code>           \u2013            <p>List of supported pools</p> </li> </ul>"},{"location":"dex/#datamaxi.datamaxi.Dex.intervals","title":"intervals","text":"<pre><code>intervals() -&gt; List[str]\n</code></pre> <p>Fetch supported intervals accepted by datamaxi.Dex.candle.</p> <p><code>GET /api/v1/dex/intervals</code></p> <p>https://docs.datamaxiplus.com/rest/dex/intervals</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported intervals</p> </li> </ul>"},{"location":"forex/","title":"Forex","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch forex data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"forex/#datamaxi.datamaxi.Forex.get","title":"get","text":"<pre><code>get(\n    symbol: str, pandas: bool = True\n) -&gt; Union[Dict, pd.DataFrame]\n</code></pre> <p>Fetch forex data</p> <p><code>GET /api/v1/forex</code></p> <p>https://docs.datamaxiplus.com/rest/forex/forex</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol name</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Dict, DataFrame]</code>           \u2013            <p>Forex data in pandas DataFrame</p> </li> </ul>"},{"location":"forex/#datamaxi.datamaxi.Forex.symbols","title":"symbols","text":"<pre><code>symbols() -&gt; List[str]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.Forex.get API.</p> <p><code>GET /api/v1/forex/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/forex/symbols</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported symbols</p> </li> </ul>"},{"location":"funding-rate/","title":"Funding Rate","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch funding rate data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"funding-rate/#datamaxi.datamaxi.FundingRate.get","title":"get","text":"<pre><code>get(\n    exchange: str,\n    symbol: str,\n    page: int = 1,\n    limit: int = 1000,\n    fromDateTime: str = None,\n    toDateTime: str = None,\n    sort: str = \"desc\",\n    pandas: bool = True,\n) -&gt; Union[\n    Tuple[Dict, Callable], Tuple[pd.DataFrame, Callable]\n]\n</code></pre> <p>Fetch historical funding rate data</p> <p><code>GET /api/v1/funding-rate</code></p> <p>https://docs.datamaxiplus.com/rest/funding-rate/historical-funding-rate</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol name</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>fromDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Start date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>toDateTime</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>End date and time (accepts format \"2006-01-02 15:04:05\" or \"2006-01-02\")</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Tuple[Dict, Callable], Tuple[DataFrame, Callable]]</code>           \u2013            <p>Historical funding rate data in pandas DataFrame and next request function</p> </li> </ul>"},{"location":"funding-rate/#datamaxi.datamaxi.FundingRate.getLatest","title":"getLatest","text":"<pre><code>getLatest(\n    sort: str = None,\n    limit: int = None,\n    symbol: str = None,\n    exchange: str = None,\n    pandas: bool = True,\n) -&gt; Union[\n    Tuple[List, Callable], Tuple[pd.DataFrame, Callable]\n]\n</code></pre> <p>Fetch latest funding rate data</p> <p><code>GET /api/v1/funding-rate/latest</code></p> <p>https://docs.datamaxiplus.com/rest/funding-rate/latest-funding-rate</p> <p>Parameters:</p> <ul> <li> <code>sort</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort data by <code>asc</code> or <code>desc</code></p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Limit number of data to return</p> </li> <li> <code>symbol</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Symbol name</p> </li> <li> <code>exchange</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>exchange name</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[Tuple[List, Callable], Tuple[DataFrame, Callable]]</code>           \u2013            <p>Latest funding rate data in pandas DataFrame</p> </li> </ul>"},{"location":"funding-rate/#datamaxi.datamaxi.FundingRate.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.FundingRate.get API.</p> <p><code>GET /api/v1/funding-rate/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/funding-rate/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchanges</p> </li> </ul>"},{"location":"funding-rate/#datamaxi.datamaxi.FundingRate.symbols","title":"symbols","text":"<pre><code>symbols(exchange: str, market: str = 'spot') -&gt; List[str]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.FundingRate.get API.</p> <p><code>GET /api/v1/funding-rate/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/funding-rate/symbols</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>str</code>)           \u2013            <p>Exchange name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported symbols</p> </li> </ul>"},{"location":"google-trend/","title":"Google Trend","text":""},{"location":"google-trend/#datamaxi.google.Google","title":"Google","text":"<pre><code>Google(api_key=None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>API</code></p> <p>Client to fetch Google trend data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"google-trend/#datamaxi.google.Google.keywords","title":"keywords","text":"<pre><code>keywords() -&gt; List[str]\n</code></pre> <p>Get Google trend supported keywords</p> <p><code>GET /api/v1/google/keywords</code></p> <p>https://docs.datamaxiplus.com/rest/trend/google/keywords</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported Google trend keywords</p> </li> </ul>"},{"location":"google-trend/#datamaxi.google.Google.trend","title":"trend","text":"<pre><code>trend(\n    keyword: str, pandas: bool = True\n) -&gt; Union[List, pd.DataFrame]\n</code></pre> <p>Get Google trend for given keyword</p> <p><code>GET /api/v1/google/trend</code></p> <p>https://docs.datamaxiplus.com/rest/trend/google/trend</p> <p>Parameters:</p> <ul> <li> <code>keyword</code>               (<code>str</code>)           \u2013            <p>keyword to search for</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[List, DataFrame]</code>           \u2013            <p>Google trend data</p> </li> </ul>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Bisonai</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"naver-trend/","title":"Naver Trend","text":""},{"location":"naver-trend/#datamaxi.naver.Naver","title":"Naver","text":"<pre><code>Naver(api_key=None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>API</code></p> <p>Client to fetch Naver trend data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"naver-trend/#datamaxi.naver.Naver.symbols","title":"symbols","text":"<pre><code>symbols() -&gt; List[str]\n</code></pre> <p>Get Naver trend supported token symbols</p> <p><code>GET /api/v1/naver/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/trend/naver/symbols</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported Naver trend token symbols</p> </li> </ul>"},{"location":"naver-trend/#datamaxi.naver.Naver.trend","title":"trend","text":"<pre><code>trend(\n    symbol: str, pandas: bool = True\n) -&gt; Union[List, pd.DataFrame]\n</code></pre> <p>Get Naver trend for given token symbol</p> <p><code>GET /api/v1/naver/trend</code></p> <p>https://docs.datamaxiplus.com/rest/trend/naver/trend</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>token symbol to search for</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[List, DataFrame]</code>           \u2013            <p>Naver trend data</p> </li> </ul>"},{"location":"premium/","title":"Premium","text":"<p>               Bases: <code>API</code></p> <p>Client to fetch premium data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"premium/#datamaxi.datamaxi.Premium.get","title":"get","text":"<pre><code>get(\n    sort: str = None,\n    limit: int = None,\n    symbol: str = None,\n    sourceExchange: str = None,\n    targetExchange: str = None,\n    pandas: bool = True,\n) -&gt; Union[List, pd.DataFrame]\n</code></pre> <p>Fetch premium data</p> <p><code>GET /api/v1/premium</code> https://docs.datamaxiplus.com/rest/premium/premium</p> <p>Parameters:</p> <ul> <li> <code>sort</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort data by <code>asc</code> or <code>desc</code></p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Limit number of data to return</p> </li> <li> <code>symbol</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Symbol name</p> </li> <li> <code>sourceExchange</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Source exchange name</p> </li> <li> <code>targetExchange</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Target exchange name</p> </li> <li> <code>pandas</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Return data as pandas DataFrame</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Union[List, DataFrame]</code>           \u2013            <p>Premium data in pandas DataFrame</p> </li> </ul>"},{"location":"premium/#datamaxi.datamaxi.Premium.exchanges","title":"exchanges","text":"<pre><code>exchanges() -&gt; List[str]\n</code></pre> <p>Fetch supported exchanges accepted by datamaxi.Premium.get API.</p> <p><code>GET /api/v1/Premium/exchanges</code></p> <p>https://docs.datamaxiplus.com/rest/Premium/exchanges</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported exchange</p> </li> </ul>"},{"location":"premium/#datamaxi.datamaxi.Premium.symbols","title":"symbols","text":"<pre><code>symbols(\n    sourceExchange: str, targetExchange: str\n) -&gt; List[str]\n</code></pre> <p>Fetch supported symbols accepted by datamaxi.Premium.get API.</p> <p><code>GET /api/v1/premium/symbols</code></p> <p>https://docs.datamaxiplus.com/rest/premium/symbols</p> <p>Parameters:</p> <ul> <li> <code>sourceExchange</code>               (<code>str</code>)           \u2013            <p>Source exchange name</p> </li> <li> <code>targetExchange</code>               (<code>str</code>)           \u2013            <p>Target exchange name</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List of supported symbols</p> </li> </ul>"},{"location":"telegram/","title":"Telegram","text":""},{"location":"telegram/#datamaxi.telegram.Telegram","title":"Telegram","text":"<pre><code>Telegram(api_key=None, **kwargs: Any)\n</code></pre> <p>               Bases: <code>API</code></p> <p>Client to fetch Telegram data from DataMaxi+ API.</p> <p>Parameters:</p> <ul> <li> <code>api_key</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The DataMaxi+ API key</p> </li> <li> <code>**kwargs</code>               (<code>Any</code>, default:                   <code>{}</code> )           \u2013            <p>Keyword arguments used by <code>datamaxi.api.API</code>.</p> </li> </ul>"},{"location":"telegram/#datamaxi.telegram.Telegram.channels","title":"channels","text":"<pre><code>channels(\n    category: Optional[str] = None,\n    page: int = 1,\n    limit: int = 1000,\n    sort: str = \"desc\",\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get Telegram supported channels</p> <p><code>GET /api/v1/telegram/channels</code></p> <p>https://docs.datamaxiplus.com/rest/telegram/channels</p> <p>Parameters:</p> <ul> <li> <code>category</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>channel category</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, Any]</code>           \u2013            <p>List of supported Telegram channels</p> </li> </ul>"},{"location":"telegram/#datamaxi.telegram.Telegram.posts","title":"posts","text":"<pre><code>posts(\n    channel_name: Optional[str] = None,\n    page: int = 1,\n    limit: int = 1000,\n    sort: str = \"desc\",\n) -&gt; Dict[str, Any]\n</code></pre> <p>Get Telegram posts for given channel username</p> <p><code>GET /api/v1/telegram/posts</code></p> <p>https://docs.datamaxiplus.com/rest/telegram/posts</p> <p>Parameters:</p> <ul> <li> <code>channel_name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>channel name to get posts from</p> </li> <li> <code>page</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number</p> </li> <li> <code>limit</code>               (<code>int</code>, default:                   <code>1000</code> )           \u2013            <p>Limit of data</p> </li> <li> <code>sort</code>               (<code>str</code>, default:                   <code>'desc'</code> )           \u2013            <p>Sort order</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Dict[str, Any]</code>           \u2013            <p>Telegram channel posts</p> </li> </ul>"}]}